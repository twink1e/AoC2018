import java.io.File
import java.util.*
import kotlin.system.exitProcess

// input processing
val inputs = File("inputs/day10.txt").readLines()
val pos = mutableListOf<Pair<Int, Int>>()
val velocity = mutableListOf<Pair<Int, Int>>()
var minWidth = Int.MAX_VALUE
var maxWidth = Int.MIN_VALUE
var minHeight = Int.MAX_VALUE
var maxHeight = Int.MIN_VALUE

inputs.forEach {
    val details = it.replace(" ", "")
            .replace("position=<", "")
            .replace("velocity=<", "")
            .split(">")
    val p = details[0].split(",").map { it.toInt() }
    pos.add(Pair(p[0], p[1]))
    minWidth = Math.min(minWidth, p[0])
    minHeight = Math.min(minHeight, p[1])
    maxWidth = Math.max(maxWidth, p[0])
    maxHeight = Math.max(maxHeight, p[1])
    val v = details[1].split(",").map { it.toInt() }
    velocity.add(Pair(v[0], v[1]))
}

/*

You can see these points of light floating in the distance, and record their position in the sky and their velocity, the relative change in position per second (your puzzle input). The coordinates are all given from your perspective; given enough time, those positions and velocities will move the points into a cohesive message!

Rather than wait, you decide to fast-forward the process and calculate what the points will eventually spell.

For example, suppose you note the following points:

position=< 9,  1> velocity=< 0,  2>
position=< 7,  0> velocity=<-1,  0>
position=< 3, -2> velocity=<-1,  1>
position=< 6, 10> velocity=<-2, -1>
position=< 2, -4> velocity=< 2,  2>
position=<-6, 10> velocity=< 2, -2>
position=< 1,  8> velocity=< 1, -1>
position=< 1,  7> velocity=< 1,  0>
position=<-3, 11> velocity=< 1, -2>
position=< 7,  6> velocity=<-1, -1>
position=<-2,  3> velocity=< 1,  0>
position=<-4,  3> velocity=< 2,  0>
position=<10, -3> velocity=<-1,  1>
position=< 5, 11> velocity=< 1, -2>
position=< 4,  7> velocity=< 0, -1>
position=< 8, -2> velocity=< 0,  1>
position=<15,  0> velocity=<-2,  0>
position=< 1,  6> velocity=< 1,  0>
position=< 8,  9> velocity=< 0, -1>
position=< 3,  3> velocity=<-1,  1>
position=< 0,  5> velocity=< 0, -1>
position=<-2,  2> velocity=< 2,  0>
position=< 5, -2> velocity=< 1,  2>
position=< 1,  4> velocity=< 2,  1>
position=<-2,  7> velocity=< 2, -2>
position=< 3,  6> velocity=<-1, -1>
position=< 5,  0> velocity=< 1,  0>
position=<-6,  0> velocity=< 2,  0>
position=< 5,  9> velocity=< 1, -2>
position=<14,  7> velocity=<-2,  0>
position=<-3,  6> velocity=< 2, -1>
Each line represents one point. Positions are given as <X, Y> pairs: X represents how far left (negative) or right (positive) the point appears, while Y represents how far up (negative) or down (positive) the point appears.

At 0 seconds, each point has the position given. Each second, each point's velocity is added to its position. So, a point with velocity <1, -2> is moving to the right, but is moving upward twice as quickly. If this point's initial position were <3, 9>, after 3 seconds, its position would become <6, 3>.

Over time, the points listed above would move like this:

Initially:
........#.............
................#.....
.........#.#..#.......
......................
#..........#.#.......#
...............#......
....#.................
..#.#....#............
.......#..............
......#...............
...#...#.#...#........
....#..#..#.........#.
.......#..............
...........#..#.......
#...........#.........
...#.......#..........

After 1 second:
......................
......................
..........#....#......
........#.....#.......
..#.........#......#..
......................
......#...............
....##.........#......
......#.#.............
.....##.##..#.........
........#.#...........
........#...#.....#...
..#...........#.......
....#.....#.#.........
......................
......................

After 2 seconds:
......................
......................
......................
..............#.......
....#..#...####..#....
......................
........#....#........
......#.#.............
.......#...#..........
.......#..#..#.#......
....#....#.#..........
.....#...#...##.#.....
........#.............
......................
......................
......................

After 3 seconds:
......................
......................
......................
......................
......#...#..###......
......#...#...#.......
......#...#...#.......
......#####...#.......
......#...#...#.......
......#...#...#.......
......#...#...#.......
......#...#..###......
......................
......................
......................
......................

After 4 seconds:
......................
......................
......................
............#.........
........##...#.#......
......#.....#..#......
.....#..##.##.#.......
.......##.#....#......
...........#....#.....
..............#.......
....#......#...#......
.....#.....##.........
...............#......
...............#......
......................
......................
After 3 seconds, the message appeared briefly: HI. Of course, your message will be much longer and will take many more seconds to appear.

What message will eventually appear in the sky?
*/
val row = maxHeight - minHeight + 1
val col = maxWidth - minWidth + 1
println("row $row")
println("col $col")
var realPos = pos.map { Pair(it.second - minHeight, it.first - minWidth) }
var seconds = 0
while(true) {
    seconds++
    val colCount = mutableMapOf<Int, Int>()
    val rowCount = mutableMapOf<Int, Int>()
    var shouldPrintRow = false
    var shouldPrintCol = false
    realPos = realPos.withIndex().map { (idx, it) ->
        val newRow = it.first + velocity[idx].second
        val newCol = it.second + velocity[idx].first
        if (newRow < 0 || newCol < 0 || newRow >= row || newCol >= col) {
            exitProcess(0)
        }
        colCount.putIfAbsent(newCol, 0)
        rowCount.putIfAbsent(newRow, 0)
        colCount[newCol] = colCount[newCol]!! + 1
        rowCount[newRow] = rowCount[newRow]!! + 1
        if (colCount[newCol]!! > 15) shouldPrintCol = true
        if (rowCount[newRow]!! > 15) shouldPrintRow = true
        Pair(newRow, newCol)
    }
    if (shouldPrintCol && shouldPrintRow) {
        printMap()
    }
}

fun printMap() {
    println(seconds)
    val colStart = realPos.fold(Int.MAX_VALUE) { acc, it -> Math.min(acc, it.second) }
    val rowStart = realPos.fold(Int.MAX_VALUE) { acc, it -> Math.min(acc, it.first) }
    val colEnd = realPos.fold(Int.MIN_VALUE) { acc, it -> Math.max(acc, it.second) }
    val rowEnd = realPos.fold(Int.MIN_VALUE) { acc, it -> Math.max(acc, it.first) }
    for (i in rowStart..rowEnd) {
        for (j in colStart..colEnd) {
            if (realPos.contains(Pair(i, j))) print("#")
            else print(".")
        }
        println()
    }
    println()
}
/*
Part 2

exactly how many seconds would they have needed to wait for that message to appear?
*/

